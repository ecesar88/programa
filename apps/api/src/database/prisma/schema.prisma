// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Client {
  id     Int     @id @default(autoincrement())
  name   String
  phone  String?
  orders Order[]
}

model Order {
  id                Int                @id @default(autoincrement())
  dateTime          DateTime           @default(now())
  address           String
  totalPrice        Float
  splitOrderPriceBy Int                @default(1)
  items             OrderEntry[]
  bill              OrderBill[]
  observations      OrderObservation[]
  Client            Client?            @relation(fields: [clientId], references: [id])
  clientId          Int?
  MenuEntry         MenuEntry[]
}

model OrderEntry {
  id           Int                     @id @default(autoincrement())
  quantity     Int
  menuEntry    MenuEntry               @relation(fields: [menuEntryId], references: [id])
  observations OrderEntryObservation[]
  Order        Order?                  @relation(fields: [orderId], references: [id])
  orderId      Int?
  menuEntryId  Int
}

model OrderEntryObservation {
  id           Int         @id @default(autoincrement())
  content      String
  OrderEntry   OrderEntry? @relation(fields: [orderEntryId], references: [id])
  orderEntryId Int?
}

model OrderObservation {
  id      Int    @id @default(autoincrement())
  content String
  Order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int?
}

model OrderBill {
  id      Int    @id @default(autoincrement())
  price   Float
  Order   Order? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId Int?
}

model Menu {
  id         Int                 @id @default(autoincrement())
  items      MenuEntry[]
  categories MenuEntryCategory[]
}

model MenuEntry {
  id          Int                 @id @default(autoincrement())
  name        String
  description String?
  variants    MenuEntryVariant[]
  labels      MenuEntryLabel[]
  categories  MenuEntryCategory[]
  // images String?

  Menu       Menu?        @relation(fields: [menuId], references: [id])
  menuId     Int?
  Order      Order?       @relation(fields: [orderId], references: [id])
  orderId    Int?
  OrderEntry OrderEntry[]
}

model MenuEntryVariant {
  id          Int     @id @default(autoincrement())
  price       Float?
  name        String?
  description String?

  MenuEntry   MenuEntry? @relation(fields: [menuEntryId], references: [id])
  menuEntryId Int?
}

model MenuEntryCategory {
  id   Int     @id @default(autoincrement())
  name String?

  Menu   Menu? @relation(fields: [menuId], references: [id])
  menuId Int?  @unique

  MenuEntry   MenuEntry? @relation(fields: [menuEntryId], references: [id])
  menuEntryId Int?
}

model MenuEntryLabel {
  id    Int     @id @default(autoincrement())
  name  String?
  color String?

  MenuEntry   MenuEntry? @relation(fields: [menuEntryId], references: [id])
  menuEntryId Int?

  @@map("MenuEntryLabel")
}
