type BaseError implements Error {
  message: String
}

"""A client/customer on the application"""
type Client {
  id: Int
  name: String
  phone: String
}

input ClientCreateOrUpdateInput {
  name: String!
  phone: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Error {
  message: String
}

type LengthError implements Error {
  message: String
  minLength: Int
}

"""An entry on the menu"""
type MenuEntry {
  description: String
  id: Int
  labels: [MenuEntryLabel!]
  name: String
  variants: [MenuEntryVariant!]
}

"""
The category of a specific MenuEntry. This can be used to sort products by type, such as drinks, meats, grains, etc
"""
type MenuEntryCategory {
  id: Int
  name: String
}

input MenuEntryCategoryInput {
  name: String
}

"""Input to create a new MenuEntry"""
input MenuEntryInput {
  categories: [MenuEntryCategoryInput!]
  description: String
  labels: [MenuEntryLabelInput!]
  name: String!
  variants: [MenuEntryVariantInput!]
}

"""
A label on the MenuEntryObject type. This can be used to categorize MenuEntries with different labels.
"""
type MenuEntryLabel {
  color: String
  id: Int
  name: String
}

input MenuEntryLabelInput {
  color: String
  name: String
}

"""
A variant on the MenuEntry, this can be a different sized or flavored product
"""
type MenuEntryVariant {
  description: String
  id: Int
  name: String
  price: Float
}

input MenuEntryVariantInput {
  description: String
  name: String
  price: Float
}

type Mutation {
  createClient(name: String!, phone: String): Client
  createMenuEntry(data: MenuEntryInput!): MenuEntry
  createOrUpdateMenuEntryLabel(data: MenuEntryLabelInput!, id: Int): MutationCreateOrUpdateMenuEntryLabelResult
  deleteClient(id: Int!): MutationDeleteClientResult
  deleteMenuEntry(id: Int!): MutationDeleteMenuEntryResult
  deleteMenuEntryLabel(id: Int!): MutationDeleteMenuEntryLabelResult
  updateClient(data: ClientCreateOrUpdateInput!, id: Int!): Client
  updateMenuEntry(data: MenuEntryInput!, id: Int!): MutationUpdateMenuEntryResult
}

union MutationCreateOrUpdateMenuEntryLabelResult = BaseError | LengthError | MutationCreateOrUpdateMenuEntryLabelSuccess | RecordNotFoundError

type MutationCreateOrUpdateMenuEntryLabelSuccess {
  data: MenuEntryLabel!
}

union MutationDeleteClientResult = BaseError | LengthError | MutationDeleteClientSuccess | RecordNotFoundError

type MutationDeleteClientSuccess {
  data: Client!
}

union MutationDeleteMenuEntryLabelResult = BaseError | LengthError | MutationDeleteMenuEntryLabelSuccess | RecordNotFoundError

type MutationDeleteMenuEntryLabelSuccess {
  data: MenuEntryLabel!
}

union MutationDeleteMenuEntryResult = BaseError | LengthError | MutationDeleteMenuEntrySuccess | RecordNotFoundError

type MutationDeleteMenuEntrySuccess {
  data: MenuEntry!
}

union MutationUpdateMenuEntryResult = BaseError | LengthError | MutationUpdateMenuEntrySuccess | RecordNotFoundError

type MutationUpdateMenuEntrySuccess {
  data: MenuEntry!
}

type Query {
  getAllClients(page: Int = 1): [Client!]
  getAllMenuEntries(page: Int = 1): [MenuEntry!]
  getAllMenuEntryLabels(page: Int = 1): [MenuEntryLabel!]
  getClientById(id: Int!): QueryGetClientByIdResult
  getMenuEntryById(id: Int!): QueryGetMenuEntryByIdResult
  searchClients(search: String!): [Client!]
  searchMenuEntryLabels(searchTerm: String!): [MenuEntryLabel!]
}

union QueryGetClientByIdResult = BaseError | LengthError | QueryGetClientByIdSuccess | RecordNotFoundError

type QueryGetClientByIdSuccess {
  data: Client!
}

union QueryGetMenuEntryByIdResult = BaseError | LengthError | QueryGetMenuEntryByIdSuccess | RecordNotFoundError

type QueryGetMenuEntryByIdSuccess {
  data: MenuEntry!
}

type RecordNotFoundError implements Error {
  message: String
}