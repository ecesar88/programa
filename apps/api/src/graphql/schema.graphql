type BaseError implements Error {
  message: String
}

"""Long necks, cool patterns, taller than you."""
type Client {
  id: Int
  name: String
  phone: String
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

interface Error {
  message: String
}

type LengthError implements Error {
  message: String
  minLength: Int
}

"""An entry in the menu."""
type MenuEntry {
  description: String
  id: Int
  labels: [MenuEntryLabel!]
  name: String
  variant: [MenuEntryVariant!]
}

type MenuEntryLabel {
  color: String
  name: String
}

type MenuEntryVariant {
  description: String
  id: Int
  name: String
  price: Float
}

input MenuEntryVariantInput {
  description: String
  name: String
  price: Float
}

type Mutation {
  createClient(name: String!, phone: String): Client
  createMenuEntry(description: String, name: String!, variant: [MenuEntryVariantInput!]): MenuEntry
  deleteClient(id: Int!): MutationDeleteClientResult
  deleteMenuEntryById(id: Int!): MutationDeleteMenuEntryByIdResult
  updateClient(data: UserUpdateInput!, id: Int!): Client
}

union MutationDeleteClientResult = BaseError | MutationDeleteClientSuccess | RecordNotFoundError

type MutationDeleteClientSuccess {
  data: Client!
}

union MutationDeleteMenuEntryByIdResult = BaseError | MutationDeleteMenuEntryByIdSuccess | RecordNotFoundError

type MutationDeleteMenuEntryByIdSuccess {
  data: MenuEntry!
}

type Query {
  getAllClients(page: Int = 1): [Client!]
  getAllMenuEntries(page: Int = 1): [MenuEntry!]
  getClientById(id: Int!): QueryGetClientByIdResult
  getMenuEntryById(id: Int!): QueryGetMenuEntryByIdResult
  searchClients(search: String!): [Client!]
}

union QueryGetClientByIdResult = BaseError | QueryGetClientByIdSuccess | RecordNotFoundError

type QueryGetClientByIdSuccess {
  data: Client!
}

union QueryGetMenuEntryByIdResult = BaseError | QueryGetMenuEntryByIdSuccess | RecordNotFoundError

type QueryGetMenuEntryByIdSuccess {
  data: MenuEntry!
}

type RecordNotFoundError implements Error {
  message: String
}

input UserUpdateInput {
  name: String!
  phone: String
}